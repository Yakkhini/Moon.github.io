<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>你好！ on 新年快乐！</title>
    <link>https://yeyuehuke.github.io/Moon.github.io/</link>
    <description>Recent content in 你好！ on 新年快乐！</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://yeyuehuke.github.io/Moon.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://yeyuehuke.github.io/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC&#43;&#43;%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic-Concepts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC&#43;&#43;%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic-Concepts/</guid>
      <description>简明C++学习笔记 Basic Concepts 基本概念 本章记录了关于C++文件的初始化，和一些基本概念操作。
什么是C++？ C++是一门编程语言，基于C语言扩展而来。一般来说，C++和C语言偏向于更底层原理，价值也很大。它可能不如Python等新语言易上手、效率高，但有助于初学者刨根问底，深入了解计算机原理。
你好世界与头部文件初始化 C++语言文件通常以 *.cpp 文件形式出现。我们新建一个 Helloworld.cpp 文件，并在VScode中打开它。
一片空白。因为 *.cpp 和 .txt 及其他众多文件一样，都是文本文件的一种。在VScode中输入：
#include &amp;lt;iostream&amp;gt;using namespace std;int main(){cout &amp;lt;&amp;lt; &amp;#34;你好，世界！&amp;#34; &amp;lt;&amp;lt; endl;return 0;}这就是一个最基本的C++编程文件。在终端中执行它，你可以看到有目标字符串显示：
你好，世界！这就是一个最基本的C++程序。但是先别着急欢呼雀跃。当我们写下这一系列代码，并在终端中执行它时，我们究竟做了什么？
我们输入的代码可以分为两部分：Header与Body。
Header#include &amp;lt;iostream&amp;gt;using namespace std;Bodyint main(){cout &amp;lt;&amp;lt; &amp;#34;你好，世界！&amp;#34; &amp;lt;&amp;lt; endl;return 0;}Header定义了程序运行的最基本库与环境，Body则述明了程序运行的主体。int main()是一种最基本的函数，在后边的函数部分会有说明。
在这里需要注意：
 基本的语句需要以分号结尾 作为程序主体的int main()函数需要以&amp;quot;return 0;&amp;ldquo;结尾。 空白和空行在C++程序中通常被忽略，但为了增强代码可读性和美观，我们仍然应该排版代码。  注释 注释分为多行注释和单行注释。
单行注释#include &amp;lt;iostream&amp;gt;using namespace std;// 这是一行注释……多行注释int main(){cout &amp;lt;&amp;lt; &amp;#34;你好，世界！&amp;#34; &amp;lt;&amp;lt; endl;/*这是很多行注释而且注释符和注释内容在不在同一行都没有关系*//*你也可以这样来代替单行注释……*/return 0;}这就是注释。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeyuehuke.github.io/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC&#43;&#43;%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Conditionals-and-Loops/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC&#43;&#43;%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Conditionals-and-Loops/</guid>
      <description>简明C++学习笔记 Conditionals and Loops 条件与循环 本章记录了C++条件语句与一些循环(for, while, switch等)的用法。
Increment Operator 增量运算符 增量运算符有两种，一种是 prefix 形式，一种是 post fix 形式。
++x; //prefixx++; //postfix它们有什么区别呢？
Prefixx = 5;y = ++x;//Then x = 6, y = 6Prefix先令x增值，再代入计算。
Postfixx = 5;y = x++;//Then x = 6, y = 5Postfix先让x代入计算，再令其增值。
同样的，我们也有 递减运算符 。
--x; //prefixx--; //postfix它的所有特性都与增量运算符相同，只不过它可以令数字递减。 注：在具有意义的数学计算中，我们仍然建议使用&amp;quot;x = x + 1;&amp;quot;，只有在逻辑运算中再使用递增、递减运算符。
Assignment Operators 赋值运算符 不需多讲，一个例子就好。</description>
    </item>
    
    <item>
      <title>乐理笔记上线</title>
      <link>https://yeyuehuke.github.io/Moon.github.io/posts/20200420/</link>
      <pubDate>Mon, 20 Apr 2020 00:49:19 +0800</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/posts/20200420/</guid>
      <description>博客的乐理笔记在今天上线了，我已经写了一些比较基本的内容。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;笔记计划初始化</title>
      <link>https://yeyuehuke.github.io/Moon.github.io/posts/20200419C&#43;&#43;Notescreated/</link>
      <pubDate>Sun, 19 Apr 2020 11:51:34 +0800</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/posts/20200419C&#43;&#43;Notescreated/</guid>
      <description>从今天开始，本页面的C++笔记计划开始。在将来，这个笔记会被我用于C++的复习以及知识上手。</description>
    </item>
    
    <item>
      <title>Page Created！</title>
      <link>https://yeyuehuke.github.io/Moon.github.io/posts/PageCreated/</link>
      <pubDate>Thu, 16 Apr 2020 17:17:32 +0800</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/posts/PageCreated/</guid>
      <description>这个博客在今天上线了。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeyuehuke.github.io/Moon.github.io/docs/Math/mine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/docs/Math/mine/</guid>
      <description>Sure </description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeyuehuke.github.io/Moon.github.io/docs/Math/your/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/docs/Math/your/</guid>
      <description>your do you know?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yeyuehuke.github.io/Moon.github.io/docs/Shotgun/%E4%B9%90%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A3%B0%E9%9F%B3%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%B9%90%E9%9F%B3%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yeyuehuke.github.io/Moon.github.io/docs/Shotgun/%E4%B9%90%E7%90%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E5%A3%B0%E9%9F%B3%E7%9A%84%E5%8E%9F%E7%90%86%E4%B8%8E%E4%B9%90%E9%9F%B3%E4%BD%93%E7%B3%BB/</guid>
      <description>乐理学习笔记 声音的原理与乐音体系 声音的原理 声音 由物体振动产生，分为 乐音 与 噪音 两种。其中乐音震动状态相对规则，且具有固定固定音高，噪音则震动相对无序，且不具有固定的音高。
一般来说，乐音有四个属性：
  音高：发音物体振动的频率越高，则音高越高；发音物体振动的频率越低，则音高越低。
  音量：指物体振动的幅度。
物体振动的幅度越大，则响度越大；物体振动的幅度越小，则响度越小。
  音值：指物体发声的时间长短。
  音色：音色的形成较为复杂，指声音的其他特点。
  乐音体系：由一系列具有固定音高的音组成的总和。
 音列：乐音体系中按照上行或下行的次序排列的音。 音阶：按照特定规律，将音高顺次排列的一组音列。  一个例子：
音阶：1 2 3 4 5 6 7音名：C D E F G A B唱名：Do Re Mi Fa Sol La Si</description>
    </item>
    
  </channel>
</rss>