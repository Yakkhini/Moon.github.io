'use strict';(function(){const indexCfg={encode:false,tokenize:function(str){return str.replace(/[\x00-\x7F]/g,'').split('');}};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/','title':"简明 C++学习笔记",'content':""});index.add({'id':1,'href':'/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Basic-Concepts/','title':"Basic Concepts",'content':"简明C++学习笔记 Basic Concepts 基本概念 本章记录了关于C++文件的初始化，和一些基本概念操作。\n什么是C++？ C++是一门编程语言，基于C语言扩展而来。一般来说，C++和C语言偏向于更底层原理，价值也很大。它可能不如Python等新语言易上手、效率高，但有助于初学者刨根问底，深入了解计算机原理。\n你好世界与头部文件初始化 C++语言文件通常以 *.cpp 文件形式出现。我们新建一个 Helloworld.cpp 文件，并在VScode中打开它。\n一片空白。因为 *.cpp 和 .txt 及其他众多文件一样，都是文本文件的一种。在VScode中输入：\n#include \u0026lt;iostream\u0026gt;\rusing namespace std;\rint main()\r{\rcout \u0026lt;\u0026lt; \u0026#34;你好，世界！\u0026#34; \u0026lt;\u0026lt; endl;\rreturn 0;\r}\r这就是一个最基本的C++编程文件。在终端中执行它，你可以看到有目标字符串显示：\n你好，世界！\r这就是一个最基本的C++程序。但是先别着急欢呼雀跃。当我们写下这一系列代码，并在终端中执行它时，我们究竟做了什么？\n我们输入的代码可以分为两部分：Header与Body。\nHeader\r#include \u0026lt;iostream\u0026gt;\rusing namespace std;\rBody\rint main()\r{\rcout \u0026lt;\u0026lt; \u0026#34;你好，世界！\u0026#34; \u0026lt;\u0026lt; endl;\rreturn 0;\r}\r\rHeader定义了程序运行的最基本库与环境，Body则述明了程序运行的主体。int main()是一种最基本的函数，在后边的函数部分会有说明。\n在这里需要注意：\n 基本的语句需要以分号结尾 作为程序主体的int main()函数需要以\u0026quot;return 0;\u0026ldquo;结尾。 空白和空行在C++程序中通常被忽略，但为了增强代码可读性和美观，我们仍然应该排版代码。  注释 注释分为多行注释和单行注释。\n单行注释\r#include \u0026lt;iostream\u0026gt;\rusing namespace std;\r// 这是一行注释……\r多行注释\rint main()\r{\rcout \u0026lt;\u0026lt; \u0026#34;你好，世界！\u0026#34; \u0026lt;\u0026lt; endl;\r/*\r这是很多行\r注释\r而且注释符和注释内容在不在同一行都没有关系*/\r/*你也可以这样来代替单行注释……*/\rreturn 0;\r}\r\r这就是注释。\nVariables变量 变量储存在本地内存中，具有 数据类型(Data type) 和 值(Value) 两个基本特征。我们创造一个基本的整数型变量：\n#include \u0026lt;iostream\u0026gt;\rusing namespace std;\rint main()\r{\rint x = 10\rcout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl;\rreturn 0;\r}\r变量名称大小写敏感。所以变量x与变量X是两个不同的变量。若多次为同一变量指定不同数据类型，则可能导致程序错误。但是变量的值可以在程序运行中多次赋予。\ncin基本介绍 \u0026ldquo;cin\u0026quot;语句可以让用户手动为变量赋值。我们看一个简单的案例：\n#include \u0026lt;iostream\u0026gt;\rusing namespace std;\rint main()\r{\rcout \u0026lt;\u0026lt; \u0026#34;超简易计算器，只能计算两个数字相加\u0026#34; \u0026lt;\u0026lt; endl;\rint num1;\rint num2;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第一个数字\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; num1;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第二个数字\u0026#34; \u0026lt;\u0026lt; endl ;\rcin \u0026gt;\u0026gt; num2;\rint sum = num1 + num2;\rcout \u0026lt;\u0026lt; \u0026#34;结果等于 \u0026#34; \u0026lt;\u0026lt; sum \u0026lt;\u0026lt; \u0026#34;.\u0026#34;;\rsystem (\u0026#34;pause\u0026#34;);\rreturn 0;\r}\r就是如此。\nBasic Arithmetic Operators 基本数学运算 我们看看C++最基本的五个运算符。\n   操作 编程符号 数学意义     加法运算 \u0026ldquo;+\u0026rdquo; x + y   减法运算 \u0026ldquo;-\u0026rdquo; x - y   乘法运算 \u0026ldquo;*\u0026rdquo; x * y   除法运算 \u0026ldquo;/\u0026rdquo; x ÷ y    只需一个\u0026quot;小小\u0026quot;的案例。\n\r看看这个傻傻的计算器！\r↕\r\r#include \u0026lt;iostream\u0026gt;\rusing namespace std;\rint main()\r{\rcout \u0026lt;\u0026lt; \u0026#34;反人类多功能计算器，计算四次加减乘除，只能输入整数。\u0026#34; \u0026lt;\u0026lt; endl;\rcout \u0026lt;\u0026lt; \u0026#34;加法计算器……\u0026#34; \u0026lt;\u0026lt; endl;\rint add1, add2;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第一个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; add1;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第二个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; add2;\rcout \u0026lt;\u0026lt; add1 \u0026lt;\u0026lt; \u0026#34; + \u0026#34; \u0026lt;\u0026lt; add2 \u0026lt;\u0026lt; \u0026#34; = \u0026#34; \u0026lt;\u0026lt; add1 + add2 \u0026lt;\u0026lt; endl;\rcout \u0026lt;\u0026lt; \u0026#34;减法计算器……\u0026#34; \u0026lt;\u0026lt; endl;\rint abs1, abs2;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第一个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; abs1;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第二个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; abs2;\rcout \u0026lt;\u0026lt; abs1 \u0026lt;\u0026lt; \u0026#34; - \u0026#34; \u0026lt;\u0026lt; abs2 \u0026lt;\u0026lt; \u0026#34; = \u0026#34; \u0026lt;\u0026lt; abs1 - abs2 \u0026lt;\u0026lt; endl;\rcout \u0026lt;\u0026lt; \u0026#34;乘法计算器……\u0026#34; \u0026lt;\u0026lt; endl;\rint mul1, mul2;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第一个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; mul1;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第二个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; mul2;\rcout \u0026lt;\u0026lt; mul1 \u0026lt;\u0026lt; \u0026#34; x \u0026#34; \u0026lt;\u0026lt; mul2 \u0026lt;\u0026lt; \u0026#34; = \u0026#34; \u0026lt;\u0026lt; mul1 * mul2 \u0026lt;\u0026lt; endl;\rcout \u0026lt;\u0026lt; \u0026#34;除法计算器……\u0026#34; \u0026lt;\u0026lt; endl;\rint vis1, vis2;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第一个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; vis1;\rcout \u0026lt;\u0026lt; \u0026#34;请输入第二个数字：\u0026#34; \u0026lt;\u0026lt; endl;\rcin \u0026gt;\u0026gt; vis2;\rcout \u0026lt;\u0026lt; vis1 \u0026lt;\u0026lt; \u0026#34; / \u0026#34; \u0026lt;\u0026lt; vis2 \u0026lt;\u0026lt; \u0026#34; = \u0026#34; \u0026lt;\u0026lt; vis1 / vis2 \u0026lt;\u0026lt; \u0026#34;......\u0026#34; \u0026lt;\u0026lt; vis1 % vis2 \u0026lt;\u0026lt; endl;\rsystem(\u0026#34;pause\u0026#34;);\rreturn 0;\r}\r\r\r\r\r不要太难过。等我们学过 循环(Loop) 后，就可以写出正常些的计算器了。\n"});index.add({'id':2,'href':'/Moon.github.io/docs/Coding/','title':"Coding",'content':""});index.add({'id':3,'href':'/Moon.github.io/docs/Coding/%E7%AE%80%E6%98%8EC++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Conditionals-and-Loops/','title':"Conditionals and Loops",'content':"简明C++学习笔记 Conditionals and Loops 条件与循环 本章记录了C++条件语句与一些循环(for, while, switch等)的用法。\nIncrement Operator 增量运算符 增量运算符有两种，一种是 prefix 形式，一种是 post fix 形式。\n++x; //prefix\rx++; //postfix\r它们有什么区别呢？\nPrefix\rx = 5;\ry = ++x;\r//Then x = 6, y = 6\rPrefix先另x增值，再代入计算。\nPostfix\rx = 5;\ry = x++;\r//Then x = 6, y = 5\rPostfix先代入计算，再赋值。\n\r同样的，我们也有 递减运算符 。\n--x; //prefix\rx--; //postfix\r它的所有特性都与增量运算符相同，只不过它可以令数字递减。 注：在具有意义的数学计算中，我们仍然建议使用\u0026quot;x = x + 1;\u0026quot;，只有在逻辑运算中再使用递增、递减运算符。\nAssignment Operators 赋值运算符 不需多讲，一个例子就好。\nint x = 10;\rx += 4; // equivalent to x = x + 4\rx -= 5; // equivalent to x = x - 5\rx *= 3; // equivalent to x = x * 3\rx /= 2; // equivalent to x = x / 2\rx %= 4; // equivalent to x = x % 4\r不建议使用。\n"});index.add({'id':4,'href':'/Moon.github.io/docs/Math/','title':"Math",'content':""});index.add({'id':5,'href':'/Moon.github.io/posts/20200419C++Notescreated/','title':"C++开发计划初始化",'content':"从今天开始，本页面的C++笔记计划开始，将来用于C++的复习。\n"});index.add({'id':6,'href':'/Moon.github.io/posts/PageCreated/','title':"PageCreated",'content':"这个博客在今天上线了。\n"});index.add({'id':7,'href':'/Moon.github.io/docs/Math/mine/','title':"Mine",'content':"Sure "});index.add({'id':8,'href':'/Moon.github.io/docs/Math/your/','title':"Your",'content':"your do you know?\n"});index.add({'id':9,'href':'/Moon.github.io/docs/','title':"Docs",'content':""});index.add({'id':10,'href':'/Moon.github.io/posts/','title':"日志",'content':""});})();